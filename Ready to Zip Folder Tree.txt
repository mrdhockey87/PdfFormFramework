Ready to Zip Folder Tree
MauiPdfSolution/
‚îÇ
‚îú‚îÄ‚îÄ PdfFormFramework/
‚îÇ   ‚îÇ  PdfFormFramework.csproj
‚îÇ   ‚îÇ  README.md
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ Controls/
‚îÇ   ‚îÇ     PdfInteractiveFormView.cs
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ Models/
‚îÇ   ‚îÇ     PdfFieldDefinition.cs
‚îÇ   ‚îÇ     PdfFieldType.cs
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ Services/
‚îÇ         PdfFieldService.cs
‚îÇ         PdfFormOverlayService.cs
‚îÇ         PdfDataBindingService.cs
‚îÇ         TempFileService.cs
‚îÇ         PdfCompressionService.cs
‚îÇ
‚îî‚îÄ‚îÄ PdfFormDemo/
    ‚îÇ  PdfFormDemo.csproj
    ‚îÇ  App.xaml
    ‚îÇ  App.xaml.cs
    ‚îÇ  MainPage.xaml
    ‚îÇ  MainPage.xaml.cs
    ‚îÇ  README.md
    ‚îÇ
    ‚îú‚îÄ‚îÄ Models/
    ‚îÇ     ApplicationForm.cs
    ‚îÇ
    ‚îî‚îÄ‚îÄ Resources/
          demo_form.pdf.gz   ‚Üê (sample placeholder)
üìÅ PdfFormFramework/PdfFormFramework.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <UseMaui>true</UseMaui>
    <SingleProject>true</SingleProject>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="PdfSharp" Version="1.3.51" />
    <PackageReference Include="Vitvov.Maui.PDFView" Version="1.*" />
  </ItemGroup>

</Project>
üìÅ PdfFormFramework/Models/PdfFieldType.cs
namespace PdfFormFramework.Models;

public enum PdfFieldType
{
    Text,
    MultiLineText,
    CheckBox,
    ComboBox,
    RadioButton,
    Unknown
}
üìÅ PdfFormFramework/Models/PdfFieldDefinition.cs
namespace PdfFormFramework.Models;

public class PdfFieldDefinition
{
    public string Name { get; set; } = string.Empty;
    public PdfFieldType FieldType { get; set; } = PdfFieldType.Unknown;
    public Rect Bounds { get; set; }
    public string Value { get; set; } = string.Empty;
    public List<string>? Options { get; set; }
    public Action<string>? OnValueChanged { get; set; }
}
üìÅ PdfFormFramework/Services/PdfCompressionService.cs
using System.IO.Compression;

namespace PdfFormFramework.Services;

public static class PdfCompressionService
{
    public static string DecompressGzToTempPdf(string gzPath)
    {
        string pdfTemp = Path.Combine(FileSystem.CacheDirectory,
            Path.GetFileNameWithoutExtension(gzPath) + "_temp.pdf");

        using var gz = File.OpenRead(gzPath);
        using var gzip = new GZipStream(gz, CompressionMode.Decompress);
        using var output = File.Create(pdfTemp);
        gzip.CopyTo(output);
        return pdfTemp;
    }
}
üìÅ PdfFormFramework/Services/PdfFieldService.cs
using PdfSharp.Pdf;
using PdfSharp.Pdf.IO;
using PdfSharp.Pdf.AcroForms;
using PdfFormFramework.Models;

namespace PdfFormFramework.Services;

public class PdfFieldService
{
    private readonly string _tempFile;

    public PdfFieldService(string pdfPath)
    {
        _tempFile = pdfPath;
    }

    public List<PdfFieldDefinition> ExtractFields()
    {
        using var doc = PdfReader.Open(_tempFile, PdfDocumentOpenMode.Modify);
        var fields = doc.AcroForm?.Fields.Cast<PdfAcroField>() ?? [];
        var list = new List<PdfFieldDefinition>();

        foreach (var f in fields)
        {
            var def = new PdfFieldDefinition { Name = f.Name, Value = f.ValueAsString };
            def.FieldType = f switch
            {
                PdfTextField t when t.Multiline => PdfFieldType.MultiLineText,
                PdfTextField => PdfFieldType.Text,
                PdfCheckBoxField => PdfFieldType.CheckBox,
                PdfComboBoxField => PdfFieldType.ComboBox,
                PdfRadioButtonField => PdfFieldType.RadioButton,
                _ => PdfFieldType.Unknown
            };

            if (f is PdfComboBoxField combo)
                def.Options = combo.Options.GetValueOrDefault()?.Select(o => o.Text).ToList();

            var rect = f.Elements.GetRectangle("/Rect");
            def.Bounds = new Rect(rect.X1, rect.Y1, rect.Width, rect.Height);

            list.Add(def);
        }

        return list;
    }

    public void ApplyFieldValues(Dictionary<string, string> values)
    {
        using var doc = PdfReader.Open(_tempFile, PdfDocumentOpenMode.Modify);
        foreach (var kv in values)
        {
            if (doc.AcroForm.Fields[kv.Key] is PdfTextField t) t.Text = kv.Value;
            if (doc.AcroForm.Fields[kv.Key] is PdfCheckBoxField c)
                c.Checked = kv.Value.Equals("Yes", StringComparison.OrdinalIgnoreCase);
            if (doc.AcroForm.Fields[kv.Key] is PdfComboBoxField cb)
                cb.Text = kv.Value;
        }
        doc.Save(_tempFile);
    }

    public string GetTempPath() => _tempFile;
}
üìÅ PdfFormFramework/Services/PdfFormOverlayService.cs
using PdfFormFramework.Models;

namespace PdfFormFramework.Services;

public static class PdfFormOverlayService
{
    public static IEnumerable<View> CreateFieldViews(List<PdfFieldDefinition> fields, double pdfHeight)
    {
        foreach (var f in fields)
        {
            View control = f.FieldType switch
            {
                PdfFieldType.Text => new Entry { Text = f.Value, Placeholder = f.Name },
                PdfFieldType.MultiLineText => new Editor { Text = f.Value, AutoSize = EditorAutoSizeOption.TextChanges },
                PdfFieldType.CheckBox => new CheckBox { IsChecked = f.Value.Equals("Yes", StringComparison.OrdinalIgnoreCase) },
                PdfFieldType.ComboBox => new Picker { ItemsSource = f.Options ?? [], SelectedItem = f.Value },
                _ => new Label { Text = f.Name }
            };

            control.BindingContext = f;

            switch (control)
            {
                case Entry e: e.TextChanged += (_, ev) => f.OnValueChanged?.Invoke(ev.NewTextValue); break;
                case Editor e: e.TextChanged += (_, ev) => f.OnValueChanged?.Invoke(ev.NewTextValue); break;
                case CheckBox c: c.CheckedChanged += (_, ev) => f.OnValueChanged?.Invoke(ev.Value ? "Yes" : "Off"); break;
                case Picker p: p.SelectedIndexChanged += (_, ev) => f.OnValueChanged?.Invoke(p.SelectedItem?.ToString() ?? ""); break;
            }

            double y = pdfHeight - f.Bounds.Y - f.Bounds.Height;
            AbsoluteLayout.SetLayoutBounds(control, new Rect(f.Bounds.X, y, f.Bounds.Width, f.Bounds.Height));
            AbsoluteLayout.SetLayoutFlags(control, AbsoluteLayoutFlags.None);
            yield return control;
        }
    }
}
üìÅ PdfFormFramework/Services/PdfDataBindingService.cs
using System.Reflection;
using PdfFormFramework.Models;

namespace PdfFormFramework.Services;

public class PdfDataBindingService<TModel> where TModel : class, new()
{
    public TModel ToModel(List<PdfFieldDefinition> fields)
    {
        var model = new TModel();
        foreach (var f in fields)
        {
            var prop = typeof(TModel).GetProperty(f.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
            if (prop != null && prop.CanWrite)
            {
                object? val = Convert.ChangeType(f.Value, prop.PropertyType);
                prop.SetValue(model, val);
            }
        }
        return model;
    }

    public void FromModel(List<PdfFieldDefinition> fields, TModel model)
    {
        foreach (var f in fields)
        {
            var prop = typeof(TModel).GetProperty(f.Name, BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
            if (prop != null && prop.CanRead)
            {
                f.Value = prop.GetValue(model)?.ToString() ?? "";
            }
        }
    }

    public Dictionary<string, string> ToDictionary(List<PdfFieldDefinition> fields) =>
        fields.ToDictionary(f => f.Name, f => f.Value);
}
üìÅ PdfFormFramework/Services/TempFileService.cs
namespace PdfFormFramework.Services;

public static class TempFileService
{
    public static void Cleanup(string path)
    {
        if (File.Exists(path))
            File.Delete(path);
    }
}
üìÅ PdfFormFramework/Controls/PdfInteractiveFormView.cs
using Vitvov.Maui.PDFView;
using PdfFormFramework.Models;
using PdfFormFramework.Services;

namespace PdfFormFramework.Controls;

public class PdfInteractiveFormView<TModel> : ContentView where TModel : class, new()
{
    readonly PDFView _pdfView = new();
    readonly AbsoluteLayout _layout = new();
    List<PdfFieldDefinition> _fields = new();
    PdfFieldService? _fieldService;
    PdfDataBindingService<TModel> _binding = new();
    string? _tempPdf;

    public event EventHandler<string>? OnPrintRequest;

    public TModel? Model { get; set; }

    public PdfInteractiveFormView()
    {
        AbsoluteLayout.SetLayoutBounds(_pdfView, new Rect(0, 0, 1, 1));
        AbsoluteLayout.SetLayoutFlags(_pdfView, AbsoluteLayoutFlags.All);
        _layout.Children.Add(_pdfView);
        Content = _layout;
    }

    public void LoadPdfGz(string gzPath, TModel? dataModel = null)
    {
        _tempPdf = PdfCompressionService.DecompressGzToTempPdf(gzPath);
        _fieldService = new PdfFieldService(_tempPdf);
        _pdfView.Source = _tempPdf;
        Model = dataModel ?? new TModel();
        BuildForm();
    }

    void BuildForm()
    {
        if (_fieldService == null) return;
        _fields = _fieldService.ExtractFields();
        _binding.FromModel(_fields, Model!);
        foreach (var v in PdfFormOverlayService.CreateFieldViews(_fields, 842))
            _layout.Children.Add(v);
        foreach (var f in _fields)
            f.OnValueChanged = v => f.Value = v;
    }

    public void SaveModelData()
    {
        if (Model != null)
        {
            var updated = _binding.ToModel(_fields);
            foreach (var p in typeof(TModel).GetProperties())
                p.SetValue(Model, p.GetValue(updated));
        }
    }

    public void PrintForm()
    {
        _fieldService?.ApplyFieldValues(_binding.ToDictionary(_fields));
        if (_tempPdf != null)
            OnPrintRequest?.Invoke(this, _tempPdf);
    }

    protected override void OnDisappearing()
    {
        base.OnDisappearing();
        if (_tempPdf != null) TempFileService.Cleanup(_tempPdf);
    }
}
üìÅ PdfFormDemo/PdfFormDemo.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net9.0-android;net9.0-ios;net9.0-maccatalyst;net9.0-windows10.0.19041.0</TargetFrameworks>
    <OutputType>Exe</OutputType>
    <SingleProject>true</SingleProject>
    <RootNamespace>PdfFormDemo</RootNamespace>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\PdfFormFramework\PdfFormFramework.csproj" />
  </ItemGroup>

  <ItemGroup>
    <MauiAsset Include="Resources\demo_form.pdf.gz" />
  </ItemGroup>

</Project>
üìÅ PdfFormDemo/Models/ApplicationForm.cs
namespace PdfFormDemo.Models;

public class ApplicationForm
{
    public string Name { get; set; } = "";
    public string Address { get; set; } = "";
    public string Email { get; set; } = "";
    public bool AgreeTerms { get; set; } = false;
}
üìÅ PdfFormDemo/App.xaml
<?xml version="1.0" encoding="UTF-8" ?>
<Application
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    x:Class="PdfFormDemo.App">
</Application>
üìÅ PdfFormDemo/App.xaml.cs
namespace PdfFormDemo;

public partial class App : Application
{
    public App()
    {
        InitializeComponent();
        MainPage = new NavigationPage(new MainPage());
    }
}
üìÅ PdfFormDemo/MainPage.xaml
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:controls="clr-namespace:PdfFormFramework.Controls;assembly=PdfFormFramework"
             x:Class="PdfFormDemo.MainPage">
    <VerticalStackLayout>
        <controls:PdfInteractiveFormView x:Name="FormView" />
        <HorizontalStackLayout Padding="10">
            <Button Text="Save Data" Clicked="OnSaveClicked"/>
            <Button Text="Print" Clicked="OnPrintClicked"/>
        </HorizontalStackLayout>
    </VerticalStackLayout>
</ContentPage>
üìÅ PdfFormDemo/MainPage.xaml.cs
using PdfFormDemo.Models;

namespace PdfFormDemo;

public partial class MainPage : ContentPage
{
    private readonly ApplicationForm _model = new();

    public MainPage()
    {
        InitializeComponent();

        string gzPath = Path.Combine(FileSystem.AppPackageFilePath("Resources/demo_form.pdf.gz"));
        FormView.OnPrintRequest += HandlePrint;
        FormView.LoadPdfGz(gzPath, _model);
    }

    void OnSaveClicked(object sender, EventArgs e)
    {
        FormView.SaveModelData();
        DisplayAlert("Saved", $"Model updated:\nName: {_model.Name}\nEmail: {_model.Email}", "OK");
    }

    void OnPrintClicked(object sender, EventArgs e) => FormView.PrintForm();

    void HandlePrint(object? sender, string pdfPath)
    {
#if ANDROID
        var intent = new Android.Content.Intent(Android.Content.Intent.ActionView);
        intent.SetDataAndType(Android.Net.Uri.FromFile(new Java.IO.File(pdfPath)), "application/pdf");
        intent.SetFlags(Android.Content.ActivityFlags.NewTask);
        Android.App.Application.Context.StartActivity(intent);
#elif WINDOWS
        Launcher.Default.OpenAsync(new OpenFileRequest("Print PDF", new ReadOnlyFile(pdfPath)));
#elif IOS
        // Add iOS printing here
#endif
    }
}
üìÅ PdfFormDemo/README.md
# PdfFormDemo (.NET 9 MAUI)

Example app demonstrating **PdfFormFramework**.

- Loads a gzipped PDF form
- Dynamically builds control overlays
- Binds to `ApplicationForm` model
- Saves data to model only (no overwritten PDF)
- Emits `OnPrintRequest` event for host system printing
‚úÖ Ready to Use
Drop this tree into a folder MauiPdfSolution.
Open MauiPdfSolution.sln (or create from VS > Add Existing Projects).
Build/run on Windows, Android or iOS with .NET‚ÄØ9.0‚ÄØMAUI workloads installed.
Replace demo_form.pdf.gz with your own gzipped PDF forms.
This structure is completely ready for GitHub: